<!-- layouts/partials/language-switcher.html -->
<!-- works only for post-->
 
<div id="dynamic-language-switcher" class="lang-switcher hidden-until-loaded"></div>

<style>
.lang-switcher {
  position: fixed;
  top: unset;
  left: unset;
  bottom: 20px;
  right: 40px;
  z-index: 1000;
}
.lang-main, .lang-option {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background-size: cover;
  background-position: center;
  border: 2px solid white;
  box-shadow: 0 2px 5px rgba(0,0,0,0.2);
  cursor: pointer;
  transition: all 0.3s ease;
}
.lang-alternatives {
  position: absolute;
  bottom: 0;
  right: 0;
  opacity: 0;
  visibility: hidden;
  transform: scale(0.5);
  transition: all 0.3s ease;
}
.lang-switcher:hover .lang-alternatives {
  opacity: 1;
  visibility: visible;
  transform: scale(1);
}
.lang-option {
  position: absolute;
  transition: all 0.3s ease;
}
.lang-switcher:hover .lang-option {
  transform: translateY(-55px) rotate(0deg);
}
.lang-switcher:hover .lang-option:nth-child(1) { transform: translate(-50px, -35px); }
.lang-switcher:hover .lang-option:nth-child(2) { transform: translate(-35px, -50px); }
.lang-switcher:hover .lang-option:nth-child(3) { transform: translate(-15px, -60px); }
.lang-main:hover {
  transform: scale(1.1);
  box-shadow: 0 4px 8px rgba(0,0,0,0.3);
}
.hidden-until-loaded {
  display: none;
}
</style>

<script>
  // Track the state of the language switcher
  let switcherState = {
    currentLang: null,
    availableLanguages: []
  };

  // Initialize the language switcher on page load
  document.addEventListener('DOMContentLoaded', function() {
    initLanguageSwitcher();
  });
  
  // Re-initialize after PJAX navigation
  document.addEventListener('pjax:complete', function() {
    setTimeout(initLanguageSwitcher, 300);
  });

  function initLanguageSwitcher() {
    const currentPath = window.location.pathname;
    const currentLang = getCurrentLanguage(currentPath);
    
    // Stop if not on a post page
    const isPostPage = currentPath.includes('/post/');
    if (!isPostPage) {
      document.getElementById('dynamic-language-switcher').style.display = 'none';
      return;
    }
    
    // Determine alternative languages based on current language
    const allLanguages = ['en', 'vi'];
    const alternativeLangs = allLanguages.filter(lang => lang !== currentLang);
    
    // Check availability of alternative language versions
    Promise.all(
      alternativeLangs.map(lang => {
        const altPath = lang === 'en' 
          ? currentPath.replace('/vi/', '/') 
          : `/vi${currentPath}`;
        
        return fetch(altPath, { method: 'HEAD' })
          .then(response => response.ok ? lang : null)
          .catch(() => null);
      })
    ).then(availableLangs => {
      const validLangs = availableLangs.filter(lang => lang !== null);
      
      if (validLangs.length > 0) {
        updateLanguageSwitcher(currentLang, validLangs);
      } else {
        document.getElementById('dynamic-language-switcher').style.display = 'none';
      }
    });
  }

  function getCurrentLanguage(path) {
    return path.startsWith('/vi/') ? 'vi' : 'en';
  }

  function updateLanguageSwitcher(currentLang, availableLangs) {
    const switcherContainer = document.getElementById('dynamic-language-switcher');
    
    // Create main language button
    switcherContainer.innerHTML = `
      <div class="lang-main" style="background-image: url('/images/flags/${currentLang}.svg')"></div>
      <div class="lang-alternatives">
        ${availableLangs.map((lang, index) => `
          <div 
            class="lang-option" 
            data-lang="${lang}" 
            style="background-image: url('/images/flags/${lang}.svg');"
          ></div>
        `).join('')}
      </div>
    `;
    
    // Show container
    switcherContainer.style.display = 'block';
    switcherContainer.classList.remove('hidden-until-loaded');
    
    // Add click event to alternative language buttons
    switcherContainer.querySelectorAll('.lang-option').forEach(option => {
      option.addEventListener('click', function() {
        const targetLang = this.getAttribute('data-lang');
        const currentPath = window.location.pathname;
        
        const targetPath = targetLang === 'en' 
          ? currentPath.replace('/vi/', '/') 
          : `/vi${currentPath}`;
        
        // Use PJAX-like navigation
        window.dispatchEvent(new Event('pjax:send'));
        
        fetch(targetPath)
          .then(response => {
            if (!response.ok) throw new Error('Network response was not ok');
            return response.text();
          })
          .then(html => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            
            const mainContent = document.querySelector('section#main');
            const newContent = doc.querySelector('section#main');
            
            if (mainContent && newContent) {
              mainContent.innerHTML = newContent.innerHTML;
              
              window.history.pushState({url: targetPath}, doc.title, targetPath);
              document.title = doc.title;
              
              window.dispatchEvent(new Event('pjax:success'));
              
              setTimeout(() => {
                initLanguageSwitcher();
                window.dispatchEvent(new Event('pjax:complete'));
              }, 300);
            } else {
              window.location.href = targetPath;
            }
          })
          .catch(error => {
            console.error('Language switch error:', error);
            window.location.href = targetPath;
          });
      });
    });
  }
</script>