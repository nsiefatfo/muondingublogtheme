{{ $tags := site.Taxonomies.tags }}
{{ if $tags }}
<div class="tag-filter-wrapper" data-aos="{{ site.Params.animation.options.home.widget }}">
  <div class="tag-filter">
    <h3>Filter by Tag:</h3>
    <div class="tag-filter-buttons">
      <button class="tag-filter-btn active" data-tag="all">All</button>
      {{ range $tag, $pages := $tags }}
        {{ $cleanTag := replace $tag " " "-" | lower }}
        <button class="tag-filter-btn" data-tag="{{ $cleanTag }}">
          {{ $tag }} ({{ len $pages }})
        </button>
      {{ end }}
    </div>
  </div>
</div>
{{ end }}

<style>
/* Add these specific text color variables for the tag filter */
/* Dark mode override */

.tag-filter-wrapper {
  margin: 2rem 0;
  padding: 1.5rem;
  background: var(--card-bg);
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(28, 106, 196, 0.123);
  border: 1px solid var(--border-color);
}

.tag-filter h3 {
  margin: 0 0 1.5rem 0;
  font-size: 1.1rem;
  font-weight: 600;
  color: var(--heading-color);
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.tag-filter h3::before {
  content: '';
  display: block;
  width: 24px;
  height: 24px;
  background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"/></svg>');
  color: var(--heading-color); /* Matches the heading color in both modes */
}

.tag-filter-buttons {
  display: flex;
  flex-wrap: wrap;
  gap: 0.75rem;
}

.tag-filter-btn {
  padding: 0.625rem 1.25rem;
  border: 2px solid var(--tag-border);
  border-radius: 8px;
  background: var(--tag-bg);
  color: var(--tag-text);
  cursor: pointer;
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  font-size: 0.9rem;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  position: relative;
  overflow: hidden;
}

.tag-filter-btn::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.1);
  transform: translate(-50%, -50%) scale(0);
  border-radius: 50%;
  transition: transform 0.3s ease;
}

.tag-filter-btn:active::after {
  transform: translate(-50%, -50%) scale(2);
  opacity: 0;
}

.tag-filter-btn:hover {
  background: var(--tag-hover-bg);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(17, 133, 211, 0.247);
}

.tag-filter-btn.active {
  background: var(--tag-active-bg);
  color: var(--tag-active-text);
  border-color: var(--tag-active-bg);
  transform: translateY(0);
  box-shadow: 0 2px 6px rgba(42, 151, 214, 0.329);
}

.tag-filter-btn.active::before {
  content: 'âœ“';
  display: inline-block;
  margin-right: 0.25rem;
  font-size: 0.9em;
}

.post-wrapper {
  transition: all 0.3s ease, height 0.3s ease;
}

.post-wrapper.hidden {
  opacity: 0;
  transform: translateY(-10px);
  height: 0 !important;
  margin: 0 !important;
  padding: 0 !important;
  pointer-events: none;
}

@media (prefers-color-scheme: dark) {
  .tag-filter-wrapper {
    --tag-filter-text: #e5e7eb;  /* Light gray for dark mode */
    --tag-filter-active-text: #1a1a1a;  /* Dark color for active state */
  }
  .tag-filter-btn {
    color: hsla(207, 64%, 69%, 0.877);
  }
  .tag-filter-btn.active {
  color: hsla(177, 65%, 69%, 0.877);
  }
  /* Optional: Adjust icon color */
  .tag-filter h3::before {
    filter: invert(0.8);
  }
}


</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const filterButtons = document.querySelectorAll('.tag-filter-btn');
  const posts = document.querySelectorAll('.post-wrapper');

  function normalizeTag(tag) {
    return tag.trim().toLowerCase().replace(/\s+/g, '-');
  }

  filterButtons.forEach(button => {
    button.addEventListener('click', function() {
      const selectedTag = normalizeTag(this.dataset.tag);
      
      // Update active state
      filterButtons.forEach(btn => btn.classList.remove('active'));
      this.classList.add('active');

      // Filter posts
      posts.forEach(post => {
        const postTags = post.dataset.tags 
          ? post.dataset.tags.split(',').map(normalizeTag)
          : [];
        
        if (selectedTag === 'all' || postTags.includes(selectedTag)) {
          post.classList.remove('hidden');
        } else {
          post.classList.add('hidden');
        }
      });
    });
  });
});
</script>