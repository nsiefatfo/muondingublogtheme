<div id="youtube-player-container" class="yt-player">
  <div class="player-body">
    <div class="player-thumbnail">
      <img id="current-thumbnail" src="/api/placeholder/400/320" alt="Video thumbnail">
    </div>
    
    <div class="player-info">
      <div class="player-music">
        <span id="current-track-title" class="player-title">No track selected</span>
        <span class="player-author"></span>
      </div>

      <div class="player-controller">
        <div class="player-controls player-bar-wrap">
          <button id="prev-button" class="player-icon control-button">
            <svg class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" width="20" height="20">
              <path d="M689.92 128l0 768-384-384z" fill="currentColor"></path>
            </svg>
          </button>
          <button id="play-pause-button" class="player-icon control-button">
            <svg class="icon play" viewBox="0 0 512 512" width="20" title="play-circle">   
              <path d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm115.7 272l-176 101c-15.8 8.8-35.7-2.5-35.7-21V152c0-18.4 19.8-29.8 35.7-21l176 107c16.4 9.2 16.4 32.9 0 42z" />
            </svg>
            <svg class="icon pause" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" width="20" height="20" style="display:none">
              <path d="M256 128h192v768H256zM576 128h192v768H576z" fill="currentColor"></path>
            </svg>
          </button>
          <button id="next-button" class="player-icon control-button">
            <svg class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" width="20" height="20">
              <path d="M334.08 128l384 384-384 384z" fill="currentColor"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <div class="playlist-toggle-container">
    <button id="toggle-playlist" class="playlist-toggle-btn">
      <span>Show Playlist</span>
      <svg class="dropdown-icon" viewBox="0 0 24 24" width="16" height="16" xmlns="http://www.w3.org/2000/svg">
        <path d="M7 10l5 5 5-5z" fill="currentColor"></path>
      </svg>
    </button>
    <div class="volume-control player-volume-wrap">
      <div class="player-volume-bar">
        <input type="range" id="volume-slider" min="0" max="100" value="70" class="player-volume">
      </div>
    </div>
  </div>
  
  <div class="player-list" style="display: none">
    <ol id="playlist" class="track-list">
      <li class="loading-message player-list-light">
        <span class="player-list-cur"></span>
        <span class="player-list-title">Select a song</span>
      </li>
    </ol>
  </div>
</div>

<!-- Mobile Toggle Button -->
<button id="mobile-player-toggle" class="mobile-toggle-btn">
  <img id="mobile-toggle-icon" src="/path/to/default-icon.svg" alt="Toggle player">
</button>
    
<style>
  :root {
    --color-wrap: #f5f5f593;
    --color-link: #2196f3;
    --color-h2-border: #e0e0e0;
    --color-hover-shadow: #e9e9e9;
    --post-radius: 8px;
    --font-basic: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
  }

  .yt-player {
    margin: 0 0 calc(var(--spacing-unit) * 2.5) !important;
    border-radius: var(--post-radius) !important;
    background: var(--color-wrap) !important;
    transition: all 0.3s;
    font-family: var(--font-basic) !important;
    width: 14%;
    max-width: clamp(20rem, 50vw, 25rem);
    margin: 0 auto;
    box-shadow: 0 0.125rem 0.3125rem rgba(0, 0, 0, 0.1);
    overflow: hidden;
    position: fixed;
    bottom: unset;
    left: unset;
    right: 10px;
    top: 60px;
    z-index: 1000;
  }
  
  .yt-player button, .yt-player .player-icon {
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 8px;
    transition: all 0.2s;
    color: #666;
  }
  
  .yt-player button:hover, .yt-player .player-icon:hover {
    color: var(--color-link) !important;
  }
  
  .yt-player button:hover path, .yt-player .player-icon:hover path {
    fill: var(--color-link) !important;
  }
  
  .player-body {
    display: flex;
    padding: 15px;
  }
  
  .player-thumbnail {
    position: relative;
    width: 6rem;
    height: 4.25rem;
    flex-shrink: 0;
    margin-right: var(--spacing-unit);
    border-radius: var(--post-radius);
    overflow: hidden;
  }
  
  #current-thumbnail {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .player-info {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding-bottom: 5px;
    padding-left: 10px;
    padding-top: 10px;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .player-music {
    margin-bottom: 15px;
  }
  
  .player-title {
    font-size: 16px;
    color: var(--color-link) !important;
    display: block;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .player-author {
    font-size: 14px;
    color: #999;
  }
  
  .player-controls, .player-controller {
    display: flex;
    align-items: center;
  }
  
  .player-bar-wrap {
    display: flex;
    align-items: center;
    flex-grow: 1;
  }
  
  .volume-control, .player-volume-wrap {
    display: flex;
    align-items: center;
    margin-left: 1em;
  }
  
  .player-volume-bar {
    width: 80px;
    height: 20px;
    margin-left: 5px;
  }
  
  #volume-slider, .player-volume {
    width: 100%;
    height: 10px;
    appearance: none;
    background: #138bd12c;
    border-radius: 3px;
    outline: none;
  }
  
  #volume-slider::-webkit-slider-thumb, .player-volume::-webkit-slider-thumb {
    appearance: none;
    width: 12px;
    height: 12px;
    background-color: var(--color-link);
    border-radius: 50%;
    cursor: pointer;
  }
  
  /* Playlist toggle button */
  .playlist-toggle-container {
    padding: 8px 15px;
    border-top: 1px solid var(--color-h2-border) !important;
    display: flex
  }
  
  .playlist-toggle-btn {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 50%;
    padding: 8px 12px;
    background-color: var(--color-hover-shadow);
    border-radius: 4px;
    border: none;
    cursor: pointer;
    font-size: 14px;
    color: var(--color-link);
    transition: all 0.2s;
  }
  
  .playlist-toggle-btn:hover {
    background-color: var(--color-hover-shadow);
    opacity: 0.8;
  }
  
  .dropdown-icon {
    transition: transform 0.2s;
  }
  
  .dropdown-icon.active {
    transform: rotate(180deg);
  }
  
  .player-list {
    max-height: 250px;
    overflow-y: auto;
    border-top: 1px solid var(--color-h2-border) !important;
    background: var(--color-wrap);
    transition: all .3s;
  }
  
  .player-list ol {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .player-list ol li {
    padding: 10px 15px;
    cursor: pointer;
    position: relative;
    transition: all .3s;
    border-top: 1px solid var(--color-h2-border) !important;
    display: flex;
    align-items: center;
  }
  
  .player-list ol li:first-child {
    border-top: none !important;
  }
  
  .player-list-cur {
    width: 3px;
    height: 22px;
    background-color: var(--color-link);
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    display: none;
  }
  
  .player-list-light .player-list-cur {
    display: block;
  }
  
  .player-list ol li.player-list-light {
    background: var(--color-hover-shadow) !important;
  }
  
  .player-list ol li:hover {
    background: var(--color-hover-shadow) !important;
  }
  
  .player-list-title {
    color: var(--color-link) !important;
    flex: 1;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .loading-message {
    text-align: center;
    padding: 20px;
    font-style: italic;
    color: #666;
  }
  
  /* Fixed player styles */
  .player-fixed {
    position: fixed;
    bottom: unset;
    left: 50%;
    top: 0;
    transform: translateX(-50%);
    width: 400px;
    margin: 0 !important;
    z-index: 99;
    max-width: 100%;
    max-height: 50%;
    border-radius: 0 !important;
  }
  
  .player-fixed .player-body {
    background: var(--color-wrap) !important;
    transition: all .3s;
  }
  
  .player-fixed .player-info {
    transition: all .3s;
    border-top: 1px solid var(--color-h2-border) !important;
  }
  
  .player-fixed .player-list {
    border: 1px solid var(--color-h2-border) !important;
    transition: all .3s;
    position: absolute;
    bottom: 100%;
    left: 0;
    right: 0;
    max-height: 300px;
  }

  .player-fixed .list{
    position: absolute;
  }
  
  .player-fixed .player-list-light{
    border: 1px solid var(--color-h2-border) !important;
    transition: all .3s;
    position: absolute;
    bottom: 100%;
    left: 0;
    right: 0;
    max-height: 300px;
  }
  
  .player-fixed .player-list-title{
    color: var(--color-link) !important;
  }
  
  .player-fixed .player-list ol{
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .player-fixed .player-list ol li{
    padding: var(--spacing-unit);
  }
  
  .player-fixed .list-cur{
    background-color: var(--color-h2-border) !important;
  }
  
  /* Mobile responsiveness - Hide player on mobile */
  @media screen and (max-width: 768px) {
    .yt-player {
      display: none;
    }
  }
  
  /* Mobile toggle button */
  .mobile-toggle-btn {
    display: none;
    position: fixed;
    bottom: unset;
    top: 66px;
    right: 40px;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: var(--color-wrap);
    border: none;
    box-shadow: 0 5px 10px rgba(104, 188, 221, 0.336);
    z-index: 1001;
    cursor: pointer;
    padding: 0;
    align-items: center;
    justify-content: center;
  }
 
    @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
  }

  .pulse-animation {
    animation: pulse 2s infinite ease-in-out;
  }
        
  .mobile-toggle-btn img {
    width: 38px;
    height: 38px;
    object-fit: contain;
    opacity: 0.5;
  }
  
  /* Only show mobile toggle on mobile */
  @media screen and (max-width: 768px) {
    .mobile-toggle-btn {
      display: flex;
    }
    
    /* When toggled on mobile */
    .yt-player.mobile-visible {
      display: block;
      width: 100%;
      max-width: 100%;
      left: 0;
      right: 0;
      bottom: auto;
      top: 0px;
      transform: none;
      border-radius: var(--post-radius) !important;
    }
  }
</style>
  
<script>
  // Create a self-executing function to isolate variables
(function() {
  // Player configuration
  const playerConfig = {
    playlistId: '{{ .Site.Params.youtubePlaylistId | default "PLNCRTSKlYNhcFv-2-5VB2H1Gm_reJ3aFY" }}',
    autoplay: {{ .Site.Params.playerAutoplay | default 1 }},
    theme: '{{ .Site.Params.playerTheme | default "dark" }}',
    shuffle: {{ .Site.Params.playerShuffle | default 1 }},
    fixed: {{ .Site.Params.playerFixed | default 0 }},
    mobileIcon: '{{ .Site.Params.playerMobileIcon | default "" }}'
  };

  // Global variables
  let isPlaying = false;
  let isFixed = playerConfig.fixed;
  let playlistData = [];
  let isMobileVisible = false;
  let youtubePlayer = null;

  // YouTube API Integration - Define once
  window.onYouTubeIframeAPIReady = function() {
    // Create hidden div for the player if it doesn't exist
    if (!document.getElementById('hidden-youtube-player')) {
      const hiddenPlayerDiv = document.createElement('div');
      hiddenPlayerDiv.id = 'hidden-youtube-player';
      hiddenPlayerDiv.style.display = 'none';
      document.body.appendChild(hiddenPlayerDiv);
    }

    youtubePlayer = new YT.Player('hidden-youtube-player', {
      height: '1',
      width: '1',
      playerVars: {
        'playsinline': 1,
        'controls': 0,
        'showinfo': 0,
        'rel': 0,
        'iv_load_policy': 3,
        'modestbranding': 1,
        'theme': playerConfig.theme
      },
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
      }
    });
    
    // Store player in window for accessibility
    window.youtubePlayer = youtubePlayer;
  };

  // Load the YouTube API script if not already loaded
  if (!window.YT) {
    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
  } else if (typeof window.YT.Player === 'function') {
    // If API is already loaded, call onYouTubeIframeAPIReady immediately
    window.onYouTubeIframeAPIReady();
  }

  // Set fixed mode initially if configured
  if (isFixed && document.getElementById('youtube-player-container')) {
    document.getElementById('youtube-player-container').classList.add('player-fixed');
  }

  // When player is ready, load the playlist
  function onPlayerReady(event) {
    event.target.setVolume(70);
    loadYouTubePlaylist();
    
    // Add event listener for autoplay handling
    window.addEventListener('click', function() {
      // This helps with browsers that require user interaction before autoplay
      if (playerConfig.autoplay && !isPlaying && youtubePlayer) {
        youtubePlayer.playVideo();
      }
    }, { once: true }); 
  }

  // Handle player state changes
  function onPlayerStateChange(event) {
    const mobileToggle = document.getElementById('mobile-player-toggle');
    
    if (event.data === YT.PlayerState.ENDED) {
      playNextTrack();
    }
    if (event.data === YT.PlayerState.CUED) {
      updatePlaylistUI();
    }
    if (event.data === YT.PlayerState.PLAYING) {
      isPlaying = true;
      updatePlayPauseButton(true);
      updateCurrentTrackInfo();
      updateActiveTrack();
      
      // Add animation to mobile toggle when playing
      if (mobileToggle) {
        mobileToggle.classList.add('pulse-animation');
      }
    } else if (event.data === YT.PlayerState.PAUSED || event.data === YT.PlayerState.ENDED) {
      isPlaying = false;
      updatePlayPauseButton(false);
      
      // Remove animation when paused/stopped
      if (mobileToggle) {
        mobileToggle.classList.remove('pulse-animation');
      }
    }
  }

  // Helper function to update play/pause button
  function updatePlayPauseButton(playing) {
    const playIcon = document.querySelector('.icon.play');
    const pauseIcon = document.querySelector('.icon.pause');
    if (playIcon && pauseIcon) {
      playIcon.style.display = playing ? 'none' : 'block';
      pauseIcon.style.display = playing ? 'block' : 'none';
    }
  }

  // Update current track info
  function updateCurrentTrackInfo() {
    if (youtubePlayer && document.getElementById('current-thumbnail')) {
      const videoId = youtubePlayer.getVideoData().video_id;
      document.getElementById('current-thumbnail').src = `https://img.youtube.com/vi/${videoId}/mqdefault.jpg`;
      const videoData = youtubePlayer.getVideoData();
      if (videoData && videoData.title) {
        document.getElementById('current-track-title').textContent = videoData.title;
      }
    }
  }

  // Load playlist
  function loadYouTubePlaylist() {
    if (!youtubePlayer || !document.getElementById('playlist')) return;
    
    document.getElementById('playlist').innerHTML = '<li class="loading-message player-list-light"><span class="player-list-cur"></span><span class="player-list-title">Loading playlist...</span></li>';
    
    try {
      // First, cue the playlist without playing
      youtubePlayer.cuePlaylist({
        list: playerConfig.playlistId,
        listType: 'playlist',
        index: 0,
        startSeconds: 0,
        suggestedQuality: 'default'
      });
      
      // After playlist is cued, apply shuffle if needed
      setTimeout(() => {
        if (playerConfig.shuffle) {
          youtubePlayer.setShuffle(true);
          console.log("Shuffle enabled");
        }
        
        // Now start playing if autoplay is enabled
        if (playerConfig.autoplay) {
          youtubePlayer.playVideo();
        }
        
        // Update the UI once playlist is loaded
        updatePlaylistUI();
      }, 1000);
    } catch (error) {
      console.error("Error loading playlist:", error);
      document.getElementById('playlist').innerHTML = '<li class="loading-message player-list-light"><span class="player-list-cur"></span><span class="player-list-title">Error loading playlist. Please try refreshing the page.</span></li>';
    }
  }

  // Update playlist UI
  function updatePlaylistUI() {
    if (youtubePlayer && document.getElementById('playlist')) {
      const videoIds = youtubePlayer.getPlaylist();
      const playlistElement = document.getElementById('playlist');
      playlistElement.innerHTML = '';

      function getVideoDetails(videoId, index) {
        fetch(`https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=${videoId}&format=json`)
          .then(response => response.json())
          .then(data => {
            playlistData[index] = { id: videoId, title: data.title, thumbnail: `https://img.youtube.com/vi/${videoId}/mqdefault.jpg` };
            appendPlaylistItem(index, data.title, videoId);
          })
          .catch(() => {
            appendPlaylistItem(index, `Track ${index + 1}`, videoId);
          });
      }

      function appendPlaylistItem(index, title, videoId) {
        const li = document.createElement('li');
        li.dataset.index = index;
        li.addEventListener('click', () => youtubePlayer.playVideoAt(index));
        li.innerHTML = `<span class="player-list-cur"></span><span class="player-list-title">${title}</span>`;
        playlistElement.appendChild(li);
        if (index === youtubePlayer.getPlaylistIndex()) {
          li.classList.add('player-list-light');
          document.getElementById('current-track-title').textContent = title;
          document.getElementById('current-thumbnail').src = `https://img.youtube.com/vi/${videoId}/mqdefault.jpg`;
        }
      }

      if (videoIds && videoIds.length) {
        videoIds.forEach((videoId, index) => getVideoDetails(videoId, index));
      } else {
        playlistElement.innerHTML = '<li class="loading-message player-list-light"><span class="player-list-cur"></span><span class="player-list-title">No tracks found in playlist</span></li>';
      }
    }
  }

  // Update active track
  function updateActiveTrack() {
    if (youtubePlayer && document.querySelector('#playlist')) {
      const currentIndex = youtubePlayer.getPlaylistIndex();
      document.querySelectorAll('#playlist li').forEach(item => {
        item.classList.toggle('player-list-light', parseInt(item.dataset.index) === currentIndex);
      });
    }
  }

  // Toggle play/pause
  function togglePlayPause() {
    if (youtubePlayer) {
      if (isPlaying) {
        youtubePlayer.pauseVideo();
      } else {
        youtubePlayer.playVideo();
      }
    }
  }

  // Play next/previous track
  function playNextTrack() {
    if (youtubePlayer) youtubePlayer.nextVideo();
  }
  
  function playPreviousTrack() {
    if (youtubePlayer) youtubePlayer.previousVideo();
  }



  // Toggle mobile player visibility
  function toggleMobilePlayer() {
    const playerContainer = document.getElementById('youtube-player-container');
    if (playerContainer) {
      isMobileVisible = !isMobileVisible;
      playerContainer.classList.toggle('mobile-visible', isMobileVisible);
    }
  }

  // Init function to set up everything once the DOM is loaded
  function initPlayer() {
    // Set up mobile toggle button icon
    const mobileToggleIcon = document.getElementById('mobile-toggle-icon');
    if (mobileToggleIcon && playerConfig.mobileIcon) {
      mobileToggleIcon.src = playerConfig.mobileIcon;
    }
    
    // Attach UI event listeners
    if (document.getElementById('play-pause-button')) {
      document.getElementById('play-pause-button').addEventListener('click', togglePlayPause);
    }
    
    if (document.getElementById('prev-button')) {
      document.getElementById('prev-button').addEventListener('click', playPreviousTrack);
    }
    
    if (document.getElementById('next-button')) {
      document.getElementById('next-button').addEventListener('click', playNextTrack);
    }
    
    if (document.getElementById('volume-slider')) {
      document.getElementById('volume-slider').addEventListener('input', function() {
        if (youtubePlayer) youtubePlayer.setVolume(this.value);
      });
    }
    
    if (document.getElementById('toggle-playlist')) {
      const toggleBtn = document.getElementById('toggle-playlist');
      const playlistContainer = document.querySelector('.player-list');
      const dropdownIcon = document.querySelector('.dropdown-icon');
      toggleBtn.addEventListener('click', () => {
        const isVisible = playlistContainer.style.display !== 'none';
        playlistContainer.style.display = isVisible ? 'none' : 'block';
        toggleBtn.querySelector('span').textContent = isVisible ? 'Show Playlist' : 'Hide Playlist';
        dropdownIcon.classList.toggle('active');
      });
    }
    
    // Mobile toggle button
    if (document.getElementById('mobile-player-toggle')) {
      document.getElementById('mobile-player-toggle').addEventListener('click', toggleMobilePlayer);
    }
    
    // Update UI if player exists
    if (youtubePlayer) {
      updatePlaylistUI();
      updatePlayPauseButton(isPlaying);
    }
  }

  // Run init when DOM is fully loaded
  document.addEventListener('DOMContentLoaded', initPlayer);
  
  // Also run init now in case DOM is already loaded
  if (document.readyState === 'interactive' || document.readyState === 'complete') {
    initPlayer();
  }
})(); // End of self-executing function


</script>